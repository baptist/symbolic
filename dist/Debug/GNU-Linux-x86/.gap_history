PrintTo("/home/baptist/Desktop/dft_4_sse.c", PrintCode("sub", CodeRuleTree(rt, opts), opts));
rt:=RandomRuleTree(t, opts);
rt:=RandomRuleTree(t, SpiralDefaults);
t:=TRC(DFT(4)).withTags(opts.tags);
TRC(DFT(4)).withTags(opts.tags);
opts:=SIMDGlobals.getOpts(SSE_4x32f);
PrintTo("/home/baptist/Desktop/dft_4.c", PrintCode("sub", CodeRuleTree(rt, SpiralDefaults), SpiralDefaults));
PrintTo("~/Desktop/dft_4.c", PrintCode("sub", CodeRuleTree(rt, SpiralDefaults), SpiralDefaults));
rt:=RandomRuleTree(DFT(4), SpiralDefaults);
quit;
quit;
code.RulesStrengthReduce(M));
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(1)])).list]),
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(1),code.V(0)])).list,
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(1),code.V(0),code.V(0)])).list,
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(1),code.V(0),code.V(0),code.V(0)])).list,
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(1),code.V(0),code.V(0),code.V(0),code.V(0)])).list,
prog.at(code.V([code.V(0),code.V(0),code.V(1),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0)])).list,
prog.at(code.V([code.V(0),code.V(1),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0)])).list,
M := spl.Mat([prog.at(code.V([code.V(1),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0)])).list,
(((code.nth(x,0)-code.nth(x,2))-(code.nth(x,4)-code.nth(x,6)))-((code.nth(x,1)-code.nth(x,3))-(code.nth(x,5)-code.nth(x,7))))])),
(((code.nth(x,0)-code.nth(x,2))-(code.nth(x,4)-code.nth(x,6)))+((code.nth(x,1)-code.nth(x,3))-(code.nth(x,5)-code.nth(x,7)))),
(((code.nth(x,0)+code.nth(x,2))-(code.nth(x,4)+code.nth(x,6)))-((code.nth(x,1)+code.nth(x,3))-(code.nth(x,5)+code.nth(x,7)))),
(((code.nth(x,0)+code.nth(x,2))-(code.nth(x,4)+code.nth(x,6)))+((code.nth(x,1)+code.nth(x,3))-(code.nth(x,5)+code.nth(x,7)))),
(((code.nth(x,0)-code.nth(x,2))+(code.nth(x,4)-code.nth(x,6)))-((code.nth(x,1)-code.nth(x,3))+(code.nth(x,5)-code.nth(x,7)))),
(((code.nth(x,0)-code.nth(x,2))+(code.nth(x,4)-code.nth(x,6)))+((code.nth(x,1)-code.nth(x,3))+(code.nth(x,5)-code.nth(x,7)))),
(((code.nth(x,0)+code.nth(x,2))+(code.nth(x,4)+code.nth(x,6)))-((code.nth(x,1)+code.nth(x,3))+(code.nth(x,5)+code.nth(x,7)))),
(((code.nth(x,0)+code.nth(x,2))+(code.nth(x,4)+code.nth(x,6)))+((code.nth(x,1)+code.nth(x,3))+(code.nth(x,5)+code.nth(x,7)))),
x:= code.var.fresh_t("x", code.TArray(code.TDouble, 8)),prog := code.Lambda(x, code.FList(code.TDouble, [
let(
code.RulesStrengthReduce(M));
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(1),code.V(0)])).list,
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(1),code.V(0),code.V(0),code.V(0)])).list,
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(1),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0)])).list,
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(1),code.V(0
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(1),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0)])).list,
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(1),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0)])).list,
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(1),code.V(0),code.
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(1),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0)])).list,
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(1),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(
prog.at(code.V([code.V(0),code.V(0),code.V(1),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0)])).list,
prog.at(code.V([code.V(0),code.V(1),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),cod
M := spl.Mat([prog.at(code.V([code.V(1),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0)])).list,
(((0*((code.nth(x,0)-code.nth(x,8))+(code.nth(x,5)-code.nth(x,13))))+(1*((code.nth(x,1)-code.nth(x,9))-(code.nth(x,4)-code.nth(x,12)))))-((0.707106781186547*((code.nth(x,2)-code.nth(x,10))+(code.nth(x,7)-code.nth(x,15))))+(-0.707106781186547*((code.nth(x,3)-code.nth(x,11))-(c
(((1*((code.nth(x,0)-code.nth(x,8))+(code.nth(x,5)-code.nth(x,13))))-(0*((code.nth(x,1)-code.nth(x,9))-(code.nth(x,4)-code.nth(x,12)))))-((-0.707106781186547*((code.nth(x,2)-code.nth(x,10))+(code.nth(x,7)-code.nth(x,15))))-(0.707106781186547*((code.nth(x,3)-code.nth(x,11))-(code.nth(x,6)-code.nth(x,
(((0*((code.nth(x,0)+code.nth(x,8))-(code.nth(x,4)+code.nth(x,12))))+(1*((code.nth(x,1)+code.nth(x,9))-(code.nth(x,5)+code.nth(x,13)))))-((1*((code.nth(x,2)+code.nth(x,10))-(code.nth(x,6)+code.nth(x,14))))+(0*((code.nth(x,3)+code.nth(x,11))-(code.nth(x,7)+code.nth(x,15)))))),
(((1*((code.nth(x,0)+code.nth(x,8))-(code.nth(x,4)+code.nth(x,12))))-(0*((code.nth(x,1)+code.nth(x,9))-(code.nth(x,5)+code.nth(x,13)))))-((0*((code.nth(x,2)+code.nth(x,10))-(code.nth(x,6)+code.nth(x,14))))-(1*((code.nth(x,3)+code.nth(x,11))-(code.nth(x,7)+code.nth(x,15)))))),
(((0*((code.nth(x,0)-code.nth(x,8))-(code.nth(x,5)-code.nth(x,13))))+(1*((code.nth(x,1)-code.nth(x,9))+(code.nth(x,4)-code.nth(x,12)))))-((0.707106781186548*((code.nth(x,2)-code.nth(x,10))-(code.nth(x,7)-code.nth(x,15))))+(0.707106781186548*((code.nth(x,3)-code.nth(x,11))+(code.nth(x,6)-code.nth(x,14)))))),
(((1*((code.nth(x,0)-code.nth(x,8))-(code.nth(x,5)-code.nth(x,13))))-(0*((code.nth(x,1)-code.nth(x,9))+(code.nth(x,4)-code.nth(x,12)))))-((0.707106781186548*((code.nth(x,2)-code.nth(x,10))-(code.nth(x,7)-code.nth(x,15))))-(0.707106781186548*((code.nth(x,3)-code.nth(x,11))+(code.nth(x,6)-code.nth(x,14)))))),
(((0*((code.nth(x,0)+code.nth(x,8))+(code.nth(x,4)+code.nth(x,12))))+(1*((code.nth(x,1)+code.nth(x,9))+(code.nth(x,5)+code.nth(x,13)))))-((0*((code.nth(x,2)+code.nth(x,10))+(code.nth(x,6)+code.nth(x,14))))+(1*((code.nth(x,3)+code.nth(x,11))+(code.nth(x,7)+code.nth(x,15)))))),
(((1*((code.nth(x,0)+code.nth(x,8))+(code.nth(x,4)+code.nth(x,12))))-(0*((code.nth(x,1)+code.nth(x,9))+(code.nth(x,5)+code.nth(x,13)))))-((1*((code.nth(x,2)+code.nth(x,10))+(code.nth(x,6)+code.nth(x,14))))-(0*((code.nth(x,3)+code.nth(x,11))+(code.nth(x,7)+code.nth(x,15)))))),
(((0*((code.nth(x,0)-code.nth(x,8))+(code.nth(x,5)-code.nth(x,13))))+(1*((code.nth(x,1)-code.nth(x,9))-(code.nth(x,4)-code.nth(x,12)))))+((0.707106781186547*((code.nth(x,2)-code.nth(x,10))+(code.nth(x,7)-code.nth(x,15))))+(-0.707106781186547*((code.nth(x,3)-code.nth(x,11))-(code.nth(x,6)-code.nth(x,14)))))),
(((1*((code.nth(x,0)-code.nth(x,8))+(code.nth(x,5)-code.nth(x,13))))-(0*((code.nth(x,1)-code.nth(x,9))-(code.nth(x,4)-code.nth(x,12)))))+((-0.707106781186547*((code.nth(x,2)-code.nth(x,10))+(code.nth(x,7)-code.nth(x,15))))-(0.707106781186547*((code.nth(x,3)-code.nth(x,11))-(code.nth(x,6)-code.nth(x,14)))))),
(((0*((code.nth(x,0)+code.nth(x,8))-(code.nth(x,4)+code.nth(x,12))))+(1*((code.nth(x,1)+code.nth(x,9))-(code.nth(x,5)+code.nth(x,13)))))+((1*((code.nth(x,2)+code.nth(x,10))-(code.nth(x,6)+code.nth(x,14))))+(0*((code.nth(x,3)+code.nth(x,11))-(code.nth(x,7)+code.nth(x,15)))))),
(((1*((code.nth(x,0)+code.nth(x,8))-(code.nth(x,4)+code.nth(x,12))))-(0*((code.nth(x,1)+code.nth(x,9))-(code.nth(x,5)+code.nth(x,13)))))+((0*((code.nth(x,2)+code.nth(x,10))-(code.nth(x,6)+code.nth(x,14))))-(1*((code.nth(x,3)+code.nth(x,11))-(code.nth(x,7)+code.nth(x,15)))))),
(((0*((code.nth(x,0)-code.nth(x,8))-(code.nth(x,5)-code.nth(x,13))))+(1*((code.nth(x,1)-code.nth(x,9))+(code.nth(x,4)-code.nth(x,12)))))+((0.707106781186548*((code.nth(x,2)-code.nth(x,10))-(code.nth(x,7)-code.nth(x,15))))+(0.707106781186548*((code.nth(x,3)-code.nth(x,11))+(code.nth(x,6)-code.nth(x,14)))))),
(((1*((code.nth(x,0)-code.nth(x,8))-(code.nth(x,5)-code.nth(x,13))))-(0*((code.nth(x,1)-code.nth(x,9))+(code.nth(x,4)-code.nth(x,12)))))+((0.707106781186548*((code.nth(x,2)-code.nth(x,10))-(code.nth(x,7)-code.nth(x,15))))-(0.707106781186548*((code.nth(x,3)-code.nth(x,11))+(code.nth(x,6)-code.nth(x,14)))))),
(((0*((code.nth(x,0)+code.nth(x,8))+(code.nth(x,4)+code.nth(x,12))))+(1*((code.nth(x,1)+code.nth(x,9))+(code.nth(x,5)+code.nth(x,13)))))+((0*((code.nth(x,2)+code.nth(x,10))+(code.nth(x,6)+code.nth(x,14))))+(1*((code.nth(x,3)+code.nth(x,11))+(code.nth(x,7)+code.nth(x,15)))))),
(((1*((code.nth(x,0)+code.nth(x,8))+(code.nth(x,4)+code.nth(x,12))))-(0*((code.nth(x,1)+code.nth(x,9))+(code.nth(x,5)+code.nth(x,13)))))+((1*((code.nth(x,2)+code.nth(x,10))+(code.nth(x,6)+code.nth(x,14))))-(0*((code.nth(x,3)+code.nth(x,11))+(code.nth(x,7)+code.nth(x,15)))))),
x:= code.var.fresh_t("x", code.TArray(code.TDouble, 16)),prog := code.Lambda(x, code.FList(code.TDouble, [
let(
quit;
code.RulesStrengthReduce(M));
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(1
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(1),code.V
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(1),code.V(0),code.V(0
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(1),code.V(0),code.V(0),code.V
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(1),code.V(0),code.V(0),code.V(0),code.V(
prog.at(code.V([code.V(
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(1),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0)])).list,
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(1),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0)])).list,
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(1),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0)])).list,
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(0),code.V(1),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0)])).list,
prog.at(code.V([code.V(0),code.V(0),code.V(0),code.V(1),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0)])).list,
prog.at(code.V([code.V(0),code.V(0),code.V(1),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0)])).list,
prog.at(code.V([code.V(0),code.V(1),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0)])).list,
M := spl.Mat([prog.at(code.V([code.V(1),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0),code.V(0)])).list,
(A0.14-A0.15)])),
(A0.12-A0.13),
(A0.10-A0.11),
(A0.8-A0.9),
(A0.6-A0.7),
(A0.4-A0.5),
(A0.2-A0.3),
(A0.0-A0.1),
(A0.14+A0.15),
(A0.12+A0.13),
(A0.10+A0.11),
(A0.8+A0.9),
(A0.6+A0.7),
(A0.4+A0.5),
(A0.2+A0.3),
(A0.0+A0.1),
prog := code.Lambda(x, code.FList(code.TDouble, [
),
9 := ((temp37*((code.nth(x,2)+code.nth(x,10))-(code.nth(x,6)+code.nth(x,14))))-(temp36*((code.nth(x,3)+code.nth(x,11))-(code.nth(x,7)+code.nth(x,15))))),
8 := ((temp21*((code.nth(x,0)+code.nth(x,8))-(code.nth(x,4)+code.nth(x,12))))-(temp20*((code.nth(x,1)+code.nth(x,9))-(code.nth(x,5)+code.nth(x,13))))),
7 := ((temp40*((code.nth(x,2)-code.nth(x,10))-(code.nth(x,7)-code.nth(x,15))))+(temp41*((code.nth(x,3)-code.nth(x,11))+(code.nth(x,6)-code.nth(x,14))))),
6 := ((temp24*((code.nth(x,0)-code.nth(x,8))-(code.nth(x,5)-code.nth(x,13))))+(temp25*((code.nth(x,1)-code.nth(x,9))+(code.nth(x,4)-code.nth(x,12))))),
5 := ((temp41*((code.nth(x,2)-code.nth(x,10))-(code.nth(x,7)-code.nth(x,15))))-(temp40*((code.nth(x,3)-code.nth(x,11))+(code.nth(x,6)-code.nth(x,14))))),
4 := ((temp25*((code.nth(x,0)-code.nth(x,8))-(code.nth(x,5)-code.nth(x,13))))-(temp24*((code.nth(x,1)-code.nth(x,9))+(code.nth(x,4)-code.nth(x,12))))),
3 := ((temp32*((code.nth(x,2)+code.nth(x,10))+(code.nth(x,6)+code.nth(x,14))))+(temp33*((code.nth(x,3)+code.nth(x,11))+(code.nth(x,7)+code.nth(x,15))))),
2 := ((temp16*((code.nth(x,0)+code.nth(x,8))+(code.nth(x,4)+code.nth(x,12))))+(temp17*((code.nth(x,1)+code.nth(x,9))+(code.nth(x,5)+code.nth(x,13))))),
15 := ((temp44*((code.nth(x,2)-code.nth(x,10))+(code.nth(x,7)-code.nth(x,15))))+(temp45*((code.nth(x,3)-code.nth(x,11))-(code.nth(x,6)-code.nth(x,14))))),
14 := ((temp28*((code.nth(x,0)-code.nth(x,8))+(code.nth(x,5)-code.nth(x,13))))+(temp29*((code.nth(x,1)-code.nth(x,9))-(code.nth(x,4)-code.nth(x,12))))),
13 := ((temp45*((code.nth(x,2)-code.nth(x,10))+(code.nth(x,7)-code.nth(x,15))))-(temp44*((code.nth(x,3)-code.nth(x,11))-(code.nth(x,6)-code.nth(x,14))))),
12 := ((temp29*((code.nth(x,0)-code.nth(x,8))+(code.nth(x,5)-code.nth(x,13))))-(temp28*((code.nth(x,1)-code.nth(x,9))-(code.nth(x,4)-code.nth(x,12))))),
11 := ((temp36*((code.nth(x,2)+code.nth(x,10))-(code.nth(x,6)+code.nth(x,14))))+(temp37*((code.nth(x,3)+code.nth(x,11))-(code.nth(x,7)+code.nth(x,15))))),
10 := ((temp20*((code.nth(x,0)+code.nth(x,8))-(code.nth(x,4)+code.nth(x,12))))+(temp21*((code.nth(x,1)+code.nth(x,9))-(code.nth(x,5)+code.nth(x,13))))),
1 := ((temp33*((code.nth(x,2)+code.nth(x,10))+(code.nth(x,6)+code.nth(x,14))))-(temp32*((code.nth(x,3)+code.nth(x,11))+(code.nth(x,7)+code.nth(x,15))))),
0 := ((temp17*((code.nth(x,0)+code.nth(x,8))+(code.nth(x,4)+code.nth(x,12))))-(temp16*((code.nth(x,1)+code.nth(x,9))+(code.nth(x,5)+code.nth(x,13))))),
A0:= rec(
),
x:= code.var.fresh_t("x", code.TArray(code.TDouble, 16)),A1:= rec(
let(
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
  